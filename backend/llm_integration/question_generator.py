"""
Generator pyta≈Ñ quizowych u≈ºywajƒÖcy OpenAI API
"""
import os
import json
import random


class QuestionGenerator:
    """Klasa do generowania pyta≈Ñ quizowych"""

    def __init__(self):
        """Inicjalizacja generatora pyta≈Ñ"""
        self.client = None
        self.api_key = os.getenv("OPENAI_API_KEY", "")

        # Sprawd≈∫ czy klucz API jest ustawiony
        if not self.api_key or self.api_key == "sk-your-openai-api-key-here":
            print("‚ö†Ô∏è  OPENAI_API_KEY not set - using fallback questions")
            return

        # Inicjalizuj klienta OpenAI
        try:
            from openai import OpenAI
            self.client = OpenAI(api_key=self.api_key)
            print("‚úÖ OpenAI client initialized successfully with gpt-3.5-turbo")
        except ImportError:
            print("‚ö†Ô∏è  openai package not installed - using fallback questions")
        except Exception as e:
            print(f"‚ö†Ô∏è  Failed to initialize OpenAI: {e}")

    def _convert_numeric_to_text_difficulty(self, difficulty_float):
        """
        Konwertuje numeryczny poziom trudno≈õci na tekstowy.

        Args:
            difficulty_float: Poziom trudno≈õci 1.0-10.0

        Returns:
            str: '≈Çatwy', '≈õredni' lub 'trudny'
        """
        if difficulty_float <= 3.5:
            return '≈Çatwy'
        elif difficulty_float <= 7.0:
            return '≈õredni'
        else:
            return 'trudny'

    def generate_multiple_questions(self, topic, difficulty, count):
        """
        Generuje wiele R√ì≈ªNORODNYCH pyta≈Ñ na raz.
        U≈ºywane dla sta≈Çych poziom√≥w trudno≈õci.

        Args:
            topic (str): Temat pyta≈Ñ (np. "Matematyka", "Historia")
            difficulty (float): Poziom trudno≈õci 1-10 (lub str: '≈Çatwy', '≈õredni', 'trudny')
            count (int): Ile pyta≈Ñ wygenerowaƒá

        Returns:
            list: Lista s≈Çownik√≥w z pytaniami
        """
        # Konwertuj numeryczny poziom na tekstowy je≈õli potrzeba
        if isinstance(difficulty, (int, float)):
            difficulty_text = self._convert_numeric_to_text_difficulty(difficulty)
        else:
            difficulty_text = difficulty

        # Je≈õli brak klienta OpenAI, u≈ºyj fake questions
        if self.client is None:
            print(f"üìù Generating {count} fallback questions for topic: {topic}, difficulty: {difficulty_text}")
            return [self._generate_fallback_question(topic, difficulty_text) for _ in range(count)]

        # Generuj pytania u≈ºywajƒÖc OpenAI
        try:
            print(f"ü§ñ Generating {count} DIVERSE AI questions for topic: {topic}, difficulty: {difficulty_text}")
            return self._generate_multiple_ai_questions(topic, difficulty_text, count)
        except Exception as e:
            print(f"‚ùå Error generating multiple AI questions: {e}")
            print(f"üìù Falling back to predefined questions")
            return [self._generate_fallback_question(topic, difficulty_text) for _ in range(count)]

    def _generate_multiple_ai_questions(self, topic, difficulty, count):
        """Generuje wiele r√≥≈ºnorodnych pyta≈Ñ u≈ºywajƒÖc OpenAI API"""

        # Mapuj poziom trudno≈õci na opis dla AI
        difficulty_descriptions = {
            '≈Çatwy': 'podstawowy, odpowiedni dla poczƒÖtkujƒÖcych',
            '≈õredni': 'umiarkowany, wymaga pewnej wiedzy',
            'trudny': 'zaawansowany, dla ekspert√≥w'
        }
        difficulty_desc = difficulty_descriptions.get(difficulty, 'umiarkowany')

        # Przygotuj prompt dla AI - WA≈ªNE: podkre≈õl r√≥≈ºnorodno≈õƒá!
        system_prompt = """Jeste≈õ ekspertem od tworzenia pyta≈Ñ edukacyjnych.
Tworzysz pytania quizowe w jƒôzyku polskim.
ZAWSZE odpowiadasz w formacie JSON bez dodatkowego tekstu.
WA≈ªNE: Pytania muszƒÖ byƒá R√ì≈ªNORODNE i dotyczyƒá R√ì≈ªNYCH aspekt√≥w tematu!"""

        user_prompt = f"""Wygeneruj {count} R√ì≈ªNORODNYCH pyta≈Ñ quizowych:
- Temat: {topic}
- Poziom trudno≈õci: {difficulty} ({difficulty_desc})
- WA≈ªNE: Ka≈ºde pytanie musi dotyczyƒá INNEGO aspektu tematu!
- WA≈ªNE: Unikaj powtarzania tego samego typu pyta≈Ñ!
- WA≈ªNE: Zmie≈Ñ kontekst, liczby, przyk≈Çady w ka≈ºdym pytaniu!

Zwr√≥ƒá odpowied≈∫ w DOK≈ÅADNIE tym formacie JSON (tablica {count} pyta≈Ñ):
[
  {{
    "question": "tre≈õƒá pytania 1 po polsku",
    "correct_answer": "poprawna odpowied≈∫ 1",
    "wrong_answers": ["b≈Çƒôdna 1.1", "b≈Çƒôdna 1.2", "b≈Çƒôdna 1.3"],
    "explanation": "kr√≥tkie wyja≈õnienie 1 po polsku"
  }},
  {{
    "question": "tre≈õƒá pytania 2 po polsku (INNY aspekt tematu!)",
    "correct_answer": "poprawna odpowied≈∫ 2",
    "wrong_answers": ["b≈Çƒôdna 2.1", "b≈Çƒôdna 2.2", "b≈Çƒôdna 2.3"],
    "explanation": "kr√≥tkie wyja≈õnienie 2 po polsku"
  }}
  ... (pozosta≈Çe pytania)
]"""

        # Wywo≈Çaj OpenAI API z wiƒôkszym max_tokens dla wielu pyta≈Ñ
        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.9,  # Wy≈ºsza temperatura = wiƒôcej r√≥≈ºnorodno≈õci
            max_tokens=2000  # Wiƒôcej token√≥w dla wielu pyta≈Ñ
        )

        # Pobierz odpowied≈∫
        content = response.choices[0].message.content.strip()

        # Oczy≈õƒá odpowied≈∫ z markdown code blocks
        content = self._clean_json_response(content)

        # Parsuj JSON
        questions_data = json.loads(content)

        # Waliduj strukturƒô
        if not isinstance(questions_data, list):
            raise ValueError(f"Expected list of questions, got: {type(questions_data)}")

        if len(questions_data) != count:
            print(f"‚ö†Ô∏è Requested {count} questions but got {len(questions_data)}")

        # Waliduj ka≈ºde pytanie
        for i, q_data in enumerate(questions_data):
            required_keys = ["question", "correct_answer", "wrong_answers", "explanation"]
            if not all(key in q_data for key in required_keys):
                raise ValueError(f"Question {i+1} missing required keys. Got: {q_data.keys()}")

            if len(q_data["wrong_answers"]) != 3:
                raise ValueError(f"Question {i+1} has {len(q_data['wrong_answers'])} wrong answers, expected 3")

        print(f"‚úÖ Generated {len(questions_data)} diverse AI questions successfully")
        return questions_data

    def generate_question(self, topic, difficulty):
        """
        Generuje pytanie quizowe

        Args:
            topic (str): Temat pytania (np. "Matematyka", "Historia")
            difficulty (float lub str): Poziom trudno≈õci 1-10 lub '≈Çatwy'/'≈õredni'/'trudny'

        Returns:
            dict: S≈Çownik z pytaniem, odpowiedziami i wyja≈õnieniem
        """
        # Konwertuj numeryczny poziom na tekstowy je≈õli potrzeba
        if isinstance(difficulty, (int, float)):
            difficulty_text = self._convert_numeric_to_text_difficulty(difficulty)
        else:
            difficulty_text = difficulty

        # Je≈õli brak klienta OpenAI, u≈ºyj fake questions
        if self.client is None:
            print(f"üìù Generating fallback question for topic: {topic}, difficulty: {difficulty_text}")
            return self._generate_fallback_question(topic, difficulty_text)

        # Generuj pytanie u≈ºywajƒÖc OpenAI
        try:
            print(f"ü§ñ Generating AI question for topic: {topic}, difficulty: {difficulty_text}")
            return self._generate_ai_question(topic, difficulty_text)
        except Exception as e:
            print(f"‚ùå Error generating AI question: {e}")
            print(f"üìù Falling back to predefined questions")
            return self._generate_fallback_question(topic, difficulty_text)

    def _generate_ai_question(self, topic, difficulty):
        """Generuje pytanie u≈ºywajƒÖc OpenAI API"""

        # Mapuj poziom trudno≈õci na opis dla AI
        difficulty_descriptions = {
            '≈Çatwy': 'podstawowy, odpowiedni dla poczƒÖtkujƒÖcych',
            '≈õredni': 'umiarkowany, wymaga pewnej wiedzy',
            'trudny': 'zaawansowany, dla ekspert√≥w'
        }
        difficulty_desc = difficulty_descriptions.get(difficulty, 'umiarkowany')

        # Przygotuj prompt dla AI
        system_prompt = """Jeste≈õ ekspertem od tworzenia pyta≈Ñ edukacyjnych.
Tworzysz pytania quizowe w jƒôzyku polskim.
ZAWSZE odpowiadasz w formacie JSON bez dodatkowego tekstu."""

        user_prompt = f"""Wygeneruj pytanie quizowe:
- Temat: {topic}
- Poziom trudno≈õci: {difficulty} ({difficulty_desc})

Zwr√≥ƒá odpowied≈∫ w DOK≈ÅADNIE tym formacie JSON:
{{
    "question": "tre≈õƒá pytania po polsku",
    "correct_answer": "poprawna odpowied≈∫",
    "wrong_answers": ["b≈Çƒôdna odpowied≈∫ 1", "b≈Çƒôdna odpowied≈∫ 2", "b≈Çƒôdna odpowied≈∫ 3"],
    "explanation": "kr√≥tkie wyja≈õnienie poprawnej odpowiedzi po polsku"
}}"""

        # Wywo≈Çaj OpenAI API
        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.8,
            max_tokens=500
        )

        # Pobierz odpowied≈∫
        content = response.choices[0].message.content.strip()

        # Oczy≈õƒá odpowied≈∫ z markdown code blocks
        content = self._clean_json_response(content)

        # Parsuj JSON
        question_data = json.loads(content)

        # Waliduj strukturƒô
        required_keys = ["question", "correct_answer", "wrong_answers", "explanation"]
        if not all(key in question_data for key in required_keys):
            raise ValueError(f"Missing required keys in response. Got: {question_data.keys()}")

        if len(question_data["wrong_answers"]) != 3:
            raise ValueError(f"Expected 3 wrong answers, got {len(question_data['wrong_answers'])}")

        print(f"‚úÖ AI question generated successfully")
        return question_data

    def _clean_json_response(self, content):
        """Usuwa markdown code blocks z odpowiedzi"""
        # Usu≈Ñ ```json na poczƒÖtku
        if content.startswith("```json"):
            content = content[7:]
        # Usu≈Ñ ``` na poczƒÖtku
        if content.startswith("```"):
            content = content[3:]
        # Usu≈Ñ ``` na ko≈Ñcu
        if content.endswith("```"):
            content = content[:-3]

        return content.strip()

    def _generate_fallback_question(self, topic, difficulty):
        """Generuje przyk≈Çadowe pytanie gdy OpenAI nie jest dostƒôpny"""

        # R√≥≈ºne pytania zale≈ºnie od tematu
        questions_by_topic = {
            "Matematyka": [
                {
                    'question': 'Ile wynosi suma kƒÖt√≥w w tr√≥jkƒÖcie?',
                    'correct_answer': '180 stopni',
                    'wrong_answers': ['90 stopni', '360 stopni', '270 stopni'],
                    'explanation': 'Suma kƒÖt√≥w w dowolnym tr√≥jkƒÖcie zawsze wynosi 180 stopni.'
                },
                {
                    'question': 'Co to jest liczba pierwsza?',
                    'correct_answer': 'Liczba podzielna tylko przez 1 i siebie',
                    'wrong_answers': ['Liczba nieparzysta', 'Liczba wiƒôksza od 10', 'Liczba dodatnia'],
                    'explanation': 'Liczba pierwsza to liczba naturalna wiƒôksza od 1, kt√≥ra ma dok≈Çadnie dwa dzielniki: 1 i samƒÖ siebie.'
                },
            ],
            "Historia": [
                {
                    'question': 'W kt√≥rym roku Polska odzyska≈Ça niepodleg≈Ço≈õƒá?',
                    'correct_answer': '1918',
                    'wrong_answers': ['1914', '1920', '1945'],
                    'explanation': 'Polska odzyska≈Ça niepodleg≈Ço≈õƒá 11 listopada 1918 roku po 123 latach zabor√≥w.'
                },
                {
                    'question': 'Kto by≈Ç pierwszym kr√≥lem Polski?',
                    'correct_answer': 'Boles≈Çaw Chrobry',
                    'wrong_answers': ['Mieszko I', 'Kazimierz Wielki', 'W≈Çadys≈Çaw ≈Åokietek'],
                    'explanation': 'Boles≈Çaw Chrobry zosta≈Ç koronowany na pierwszego kr√≥la Polski w 1025 roku.'
                },
            ],
            "Geografia": [
                {
                    'question': 'Jaka jest stolica Polski?',
                    'correct_answer': 'Warszawa',
                    'wrong_answers': ['Krak√≥w', 'Gda≈Ñsk', 'Pozna≈Ñ'],
                    'explanation': 'Warszawa jest stolicƒÖ Polski od 1596 roku.'
                },
                {
                    'question': 'Kt√≥ry ocean jest najwiƒôkszy?',
                    'correct_answer': 'Ocean Spokojny',
                    'wrong_answers': ['Ocean Atlantycki', 'Ocean Indyjski', 'Ocean Arktyczny'],
                    'explanation': 'Ocean Spokojny (Pacyfik) jest najwiƒôkszym oceanem na Ziemi, zajmuje oko≈Ço 46% powierzchni ocean√≥w.'
                },
            ],
        }

        # Domy≈õlne pytania je≈õli temat nie pasuje
        default_questions = [
            {
                'question': 'Ile kontynent√≥w jest na Ziemi?',
                'correct_answer': '7',
                'wrong_answers': ['5', '6', '8'],
                'explanation': 'Na Ziemi jest 7 kontynent√≥w: Afryka, Antarktyda, Azja, Australia, Europa, Ameryka P√≥≈Çnocna i Ameryka Po≈Çudniowa.'
            },
            {
                'question': 'Ile wynosi 2 + 2?',
                'correct_answer': '4',
                'wrong_answers': ['3', '5', '22'],
                'explanation': 'Podstawowe dzia≈Çanie arytmetyczne: 2 + 2 = 4.'
            },
            {
                'question': 'Jakiego koloru jest niebo w pogodny dzie≈Ñ?',
                'correct_answer': 'Niebieskie',
                'wrong_answers': ['Zielone', 'Czerwone', '≈ª√≥≈Çte'],
                'explanation': 'Niebo jest niebieskie z powodu rozpraszania ≈õwiat≈Ça (rozpraszanie Rayleigha).'
            },
        ]

        # Wybierz pytania dla danego tematu
        topic_questions = None
        for key in questions_by_topic:
            if key.lower() in topic.lower():
                topic_questions = questions_by_topic[key]
                break

        # U≈ºyj pyta≈Ñ tematycznych lub domy≈õlnych
        questions = topic_questions if topic_questions else default_questions

        return random.choice(questions)
